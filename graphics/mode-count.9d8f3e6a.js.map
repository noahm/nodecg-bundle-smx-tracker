{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,2CAAgB;AA5BhB;;AACA;AACA;AACA;AAGA,MAAM,SAAS,IAAI,IAAI,SAAS,QAAQ,CAAC,IAAI;AAC7C,IAAI,OAAO,AAAC,OAAO,YAAY,CAAC,GAAG,CAAC,WAAkC;AACtE,+EAA+E;AAC/E,IAAI,SAAS,YACX,OAAO;AAGT,IAAI,QAAQ,OAAO,YAAY,CAAC,GAAG,CAAC,YAAY;AAChD,MAAM,YAAY;IAChB;QAAE,MAAM;QAAS,OAAO;IAAU;IAClC;QAAE,MAAM;QAAQ,OAAO;IAAU;IACjC;QAAE,MAAM;QAAQ,OAAO;IAAU;IACjC;QAAE,MAAM;QAAQ,OAAO;IAAU;IACjC;QAAE,MAAM;QAAQ,OAAO;IAAU;IACjC;QAAE,MAAM;QAAQ,OAAO;IAAU;CAClC;AACD,IAAI,OACF,QAAQ,MAAM;KAEd,QAAQ,UAAU,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,OAAO;AAG3C,SAAS;IACd,MAAM,CAAC,aAAa,GAAG,CAAA,GAAA,0BAAY,AAAD,EAAgB;IAClD,MAAM,CAAC,KAAK,GAAG,CAAA,GAAA,0BAAY,AAAD,EAAiB;IAE3C,MAAM,QAAQ,cAAc,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,SAAS;IAC/D,qBAAO,yCAAC,CAAA,GAAA,8BAAc,AAAD;QAAE,OAAO;QAAO,OAAO;;;;;;;;AAC9C;AAEA,MAAM,OAAO,CAAA,GAAA,kBAAU,AAAD,EAAE,SAAS,cAAc,CAAC;AAChD,KAAK,MAAM,eAAC,yCAAC","sources":["src/graphics/mode-count.tsx"],"sourcesContent":["import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AnimatedNumber } from '../common/animatedNumber';\nimport { useReplicant } from '../common/useReplicant';\nimport type { ScoreSummary, Summary } from '../types/schemas';\n\nconst params = new URL(document.location.href);\nlet mode = (params.searchParams.get('mode') as keyof ScoreSummary) || 'wild';\n// @ts-expect-error just catching the normal human value and collapsing it down\nif (mode === 'beginner') {\n  mode = 'basic';\n}\n\nlet color = params.searchParams.get('color') ?? undefined;\nconst colorBank = [\n  { mode: 'basic', color: '#03da00' },\n  { mode: 'easy', color: '#d3b211' },\n  { mode: 'hard', color: '#a90a12' },\n  { mode: 'wild', color: '#3406bc' },\n  { mode: 'dual', color: '#1d72af' },\n  { mode: 'full', color: '#00d0b8' },\n];\nif (color) {\n  color = '#' + color;\n} else {\n  color = colorBank.find((c) => c.mode === mode)?.color;\n}\n\nexport function Index() {\n  const [scoreSummary] = useReplicant<ScoreSummary>('scoreSummary');\n  const [stat] = useReplicant<keyof Summary>('singleCountStat');\n\n  const value = scoreSummary?.[mode]?.inTotal?.[stat ?? 'passes'];\n  return <AnimatedNumber value={value} color={color} />;\n}\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(<Index />);\n"],"names":[],"version":3,"file":"mode-count.9d8f3e6a.js.map","sourceRoot":"../"}